//
//  88  88
//  88  ""               ,d
//  88                   88
//  88  88  ,adPPYba,  MM88MMM         88,dPYba,,adPYba,   ,adPPYYba,  8b,dPPYba,   ,adPPYba,
//  88  88  I8[    ""    88  aaaaaaaa  88P'   "88"    "8a  ""     `Y8  88P'    "8a  I8[    ""
//  88  88   `"Y8ba,     88  """"""""  88      88      88  ,adPPPPP88  88       d8   `"Y8ba,
//  88  88  aa    ]8I    88,           88      88      88  88,    ,88  88b,   ,a8"  aa    ]8I
//  88  88  `"YbbdP"'    "Y888         88      88      88  `"8bbdP"Y8  88`YbbdP"'   `"YbbdP"'
//                                                                     88
//                                                                     88
//  Sass List-Maps 1.0.0
//  a libsass polyfill for rubysass "maps" data-type -- using lists
//  by @lunelson
//  MIT License

///////////////////////////
// list helper functions //
///////////////////////////

/**
 * Return a comma-separated list from given argument(s).
 *
 * @since 0.9.3
 *
 * @deprecated No longer used internally.
 *
 * @param {ArgList} $args - list values
 *
 * @return {list}
 */
@function list($args...) {
  $output: ();

  @each $arg in $args {
    $output: append($output, $arg, 'comma');
  }

  @return $output;
}

/** 
 * Return a sub-list from `$list`, sliced from `$start` to `$end`.
 *
 * @param {List}   $list                  - list to slice
 * @param {Number} $start (1)             - start index
 * @param {Number} $end   (length($list)) - end index
 * @param {String} $sep   ('comma')       - default list separator
 *
 * @return {List}
 */
@function slice($list, $start: 1, $end: null, $sep: 'comma') {
  $end: $end or length($list);
  $output: ();

  @for $i from $start through $end {
    $output: append($output, nth($list, $i), $sep);
  }

  @return $output;
}

/**
 * Return `$list` with value at `$index` set/updated to `$value`.
 * 
 * @param {List}   $list            - list to set
 * @param {Number} $index           - index to set
 * @param {*}      $value           - new value
 * @param {String} $sep   ('comma') - list separator
 *
 * @return {List}
 */
@function set-nth($list, $index, $value, $sep: 'comma') {
  $length: length($list);
  $output: ();

  @if $index > $length or $index <= 0 {
    @return $list;
  }

  @if $index > 1 {
    @for $i from 1 through $index - 1 {
      $output: append($output, nth($list, $i), $sep);
    }
  }

  $output: append($output, $value, $sep);

  @if $length > 1 {
    @for $i from $index + 1 through $length {
      $output: append($output, nth($list, $i), $sep);
    }
  }

  @return $output;
}

///////////////////////////////
// list-map helper functions //
///////////////////////////////

/**
 * Return the key (first value) from `$tuple` (pair).
 *
 * @param {List} $tuple - pair (list of length 2), to extract key from
 *
 * @return {*}
 */
@function tuple-key($tuple) {
  @if length($tuple) < 1 {
    @return null;
  }

  @return nth($tuple, 1);
}

/**
 * @alias tuple-key
 * 
 * @since 0.9.3
 */
@function key($tuple) {
  @return tuple-key($tuple);
}

/**
 * Return the value (second value) from `$tuple` (pair).
 *
 * @param {List} $tuple - pair (list of length 2), to extract value from
 *
 * @return {*}
 */
@function tuple-value($tuple) {
  @if length($tuple) < 2 {
    @return null;
  }

  @return nth($tuple, 2);
}

/**
 * @alias tuple-value
 * 
 * @since 0.9.3
 */
@function value($tuple) {
  @return tuple-value($tuple);
}

/**
 * Return list-map from `$list` and ensure input list-maps are lists-of-lists.
 * 
 * @since 0.9.5 - replaces use of `list` function.
 * 
 * @param {List} $list - list-map to check
 * 
 * @return {List}
 */
@function list-map-check($list) {
  @if length($list) == 2 and length(nth($list, 1)) == 1 {
    @return append((), $list, 'comma');
  }

  @return $list;
}

/////////////////////////////////////////////////////////////////////////
// list-map versions of map-keys(), -values() and -has-key() functions //
/////////////////////////////////////////////////////////////////////////

/**
 * Return comma-separated list of keys from map.
 * Conformant with rubysass `map-keys`.
 *
 * @since 0.9.5 - use `list-map-check` to handle single pairs automatically
 * 
 * @param {ArgList} $list - list to retrieve keys from
 *
 * @requires {function} list-map-check
 * @requires {function} tuple-key
 * 
 * @return {List}
 */
@function map-keys($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: ();

  @each $tuple in $list {
    $output: append($output, tuple-key($tuple), 'comma');
  }

  @return $output;
}

/**
 * Return comma-separated list of values from map.
 * Conformant with rubysass `map-values`.
 * 
 * @since 0.9.5 - use `list-map-check` to handle single pairs automatically
 * 
 * @param {ArgList} $list - list to retrieve values from
 * 
 * @requires {function} list-map-check
 * @requires {function} tuple-value
 * 
 * @return {List}
 */
@function map-values($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: ();

  @each $tuple in $list {
    $output: append($output, tuple-value($tuple), 'comma');
  }

  @return $output;
}

/**
 * Check whether `$key` exists in `$list` at root level.
 * Conformant with rubysass `map-has-key`.
 * 
 * @param {List} $list - list to check
 * @param {*}    $key  - key to check in list
 * 
 * @requires {function} list-map-check
 * @requires {function} tuple-key
 * 
 * @return {Bool}
 */
@function map-has-key($list, $key) {
  $list: list-map-check($list);

  @each $tuple in $list {
    @if tuple-key($tuple) == $key {
      @return true;
    }
  }

  @return false;
}

////////////////////////////////////////////////////////////
// list-map versions of map-get(), -merge() and -remove() //
////////////////////////////////////////////////////////////

/**
 * Return value corresponding to `$key` in `$list`.
 * Conformant with rubysass `map-get`.
 * 
 * @since 0.9.5 - use `list-map-check` to handle single pairs automatically
 * 
 * @param {List} $list         - map
 * @param {*}    $key          - key by which to look up value
 * @param {Bool} $check (true) - whether or not to check the map format first
 * 
 * @requires {function} tuple-key
 * @requires {function} tuple-value
 * @requires {function} list-map-check
 * 
 * @return {*}
 */
@function map-get($list, $key, $check: true) {
  @if $check {
    $list: list-map-check($list);
  }

  @each $tuple in $list {
    @if tuple-key($tuple) == $key {
      @return list-map-check(tuple-value($tuple));
    }
  }

  @return null;
}

/**
 * Return a merge of second map in to first map.
 * Conformant with rubysass `map-merge`.
 * 
 * @since 0.9.5 - use `list-map-check` to handle single pairs automatically; `$check` parameter for internal use
 * 
 * @param {List} $list1        - first map
 * @param {List} $list2        - second map
 * @param {Bool} $check (true) - whether or not to check the map first
 * 
 * @requires {function} tuple-key
 * @requires {function} list-map-check
 * @requires {function} map-keys
 * @requires {function} set-nth
 * 
 * @return {List}
 */
@function map-merge($list1, $list2, $check: true) {
  @if $check {
    $list1: list-map-check($list1);
    $list2: list-map-check($list2);
  }

  $keys1: map-keys($list1);

  @each $tuple in $list2 {
    $index: index($keys1, tuple-key($tuple));

    @if $index {
      $list1: set-nth($list1, $index, $tuple);
    }

    @else {
      $list1: append($list1, $tuple, 'comma');
    }
  }

  @return $list1;
}

/**
 * Return map with tuple removed, according to `$key` (if found).
 * Conformant with rubysass `map-remove()`.
 * 
 * @param {List} $list - map
 * @param {*}    $key  - key
 * 
 * @requires {function} map-keys
 * @requires {function} list-map-check
 * 
 * @return {List}
 */
@function map-remove($list, $key) {
  $list: list-map-check($list);
  $keys: map-keys($list);
  $output: ();

  @for $n from 1 through length($list) {
    @if nth($keys, $n) != $key {
      $output: append($output, nth($list, $n), 'comma');
    }
  }

  @return $output;
}

//////////////////////////////////////////////////////////////
// deep/nested map functions: map-get-z() and map-merge-z() //
//////////////////////////////////////////////////////////////

/**
 * A *deep* nested or chained version of `map-get`.
 * 
 * @since 0.9.5 - now uses `list-map-check` to handle single pairs automatically
 * @since 0.9.2 - aliased as `get`; can replace `map-get` and `map-get-z` in usage
 *
 * @param {List}    $list - map
 * @param {ArgList} $keys - nested / chained key list (where to get value)
 *
 * @requires {function} map-get
 * 
 * @return {*}
 */
@function map-get-z($list, $keys...) {
  @if $list == null {
    @return $list;
  }

  $length: length($keys);
  $list: map-get($list, nth($keys, 1));

  @if $length > 1 {

    @for $n from 2 through $length {

      @if $list == null {
        @return $list;
      }

      $list: map-get($list, nth($keys, $n), false);
    }

    @return $list;
  }

  @return $list;
}

/**
 * @alias map-get-z
 */
@function get($args...) {
  @return map-get-z($args...);
}

/**
 * A *deep* nested or chained version of `map-merge`. Offers `map-set` syntax too.
 * 
 * @since 0.9.5 - now uses `list-map-check` to handle single pairs automatically
 * @since 0.9.2 - aliased as `merge` and `set`; can replace `map-merge` and `map-merge-z` in usage
 * 
 * @param {List}    $list            - map
 * @param {ArgList} $keys-and-values - nested / chained key list (where to merge value); final item in list is the value to be merged
 *
 * @requires {function} list-map-check
 * @requires {function} map-merge
 * @requires {function} map-get-z
 * @requires {function} slice
 * 
 * @return {List}
 */
@function map-merge-z($list, $keys-and-value...) {
  $arg-length: length($keys-and-value);
  $value: nth($keys-and-value, $arg-length);
  $key-length: $arg-length - 1;
  $list: list-map-check($list);

  @if $key-length == 0 {
    $value: if(type-of($value) == 'list', map-merge($list, list-map-check($value), false), map-merge($list, append((), $value (), 'comma'), false));
  }

  @else {
    $start: 1;

    @if type-of($value) == 'list' {
      $start: 0;
      $value: list-map-check($value);
    }

    @for $i from $start through $key-length {

      $new-list: (); $old-list: ();

      @if $i == 0 { $new-list: $value; }
      @else { $new-list: append((), nth($keys-and-value, $key-length + 1 - $i) $value, 'comma'); }

      @if $i == $key-length { $old-list: $list; }
      @else { $old-list: map-get-z($list, slice($keys-and-value, 1, $key-length - $i)...) or (); }

      $value: map-merge($old-list, $new-list);
    }
  }

  @return $value;
}

/**
 * @alias map-merge-z
 */
@function merge($args...) {
  @return map-merge-z($args...);
}

/**
 * @alias map-merge-z
 */
@function set($args...) {
  @return map-merge-z($args...);
}

/////////////////////////////////////
// additional map helper functions //
/////////////////////////////////////

/**
 * Return previous key from map.
 * 
 * @since 0.9.5 - added
 * 
 * @param {List} $list - map
 * @param {*}    $key  - pivot key
 *
 * @requires {function} map-keys
 * @requires {function} list-map-check
 * 
 * @return {*}
 */
@function map-prev-key($list, $key) {
  $list: list-map-check($list);
  $keys: map-keys($list);

  @return nth($keys, index($keys, $key) - 1);
}

/**
 * Return next key from map.
 * 
 * @since 0.9.5 - added
 * 
 * @param {List} $list - map
 * @param {*}    $key  - pivot key
 *
 * @requires {function} map-keys
 * @requires {function} list-map-check
 * 
 * @return {*}
 */
@function map-next-key($list, $key) {
  $list: list-map-check($list);
  $keys: map-keys($list);

  @return nth($keys, index($keys, $key) + 1);
}

/**
 * Return the string representation of a map.
 * 
 * @since 0.9.5
 * 
 * @param {ArgList} $list - map
 *
 * @requires {function} map-keys
 * @requires {function} list-map-check
 * @requires {function} tuple-key
 * @requires {function} tuple-value
 * @requires {function} map-inspect
 * 
 * @return {String}
 */
@function map-inspect($list...) {

  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: '(';
  $i: 1;

  @each $tuple in $list {

    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    }

    @else {
      $key: tuple-key($tuple);
      $value: tuple-value($tuple);
      $output: $output + '#{$key} ' + if(type-of($value) == 'list', '#{map-inspect($value)}', '#{$value}');
    }

    @if $i < length(map-keys($list)) {
      $output: $output + ', ';
    }

    $i: $i + 1;
  }

  @return $output + ')';
}


/**
 * Return the string representation of a map with indents and line breaks.
 * 
 * @since 0.9.9
 * 
 * @param {List}   $list      - map
 * @param {Number} $level (1) - internal variable, do not touch
 *
 * @requires {function} map-keys
 * @requires {function} tuple-key
 * @requires {function} tuple-value
 * @requires {function} list-map-check
 * @requires {function} map-pretty
 * 
 * @return {String}
 */
@function map-pretty($list, $level: 1) {

  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $indent: $tab; $outdent: $tab;
  $tab: '  ';
  $cr: '
';

  @for $n from 1 through $level {

    $indent: $indent + $tab;

    @if $i < $level {
      $outdent: $outdent + $tab;
    }
  }

  $output: '(' + $cr + $indent;
  $i: 1;

  @each $tuple in $list {

    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    }

    @else {
      $key: tuple-key($tuple);
      $value: tuple-value($tuple);
      $output: $output + '#{$key} ' + if(type-of($value) == 'list', '#{map-pretty($value, $level+1)}', '#{$value}');
    }

    @if $i < length(map-keys($list)) {
      $output: $output + ',' + $cr + $indent;
    }

    $i: $i + 1;
  }

  @return $output + $cr + $outdent + ')';
}

/**
 * @alias map-pretty
 */
@function map-inspect-pretty($list...) {
  @return map-pretty($list...);
}

/**
 * @alias map-pretty
 */
@function map-inspect-p($list...) {
  @return map-pretty($list...);
}

////////////////
// map-sort() //
////////////////

/** 
 * Global sort dir variable.
 *
 * @type String
 */
$list-map-sort-dir: 'asc';

/**
 * Return sorted list-map, based on values at given key in given list-map.
 *
 * @param {List}    $list-map
 * @param {ArgList} $keys
 *
 * @requires {function} map-get-z
 * @requires {function} list-map-check
 * @requires {function} map-sort
 * 
 * @return {List}
 */
@function map-sort($list-map, $keys...) {
  @if length($keys) < 1 {
    @return $list-map;
  }

  $list-map: list-map-check($list-map);

  @if length($list-map) > 1 {
    $less: (); $equal: (); $greater: ();
    $seed: nth($list-map, ceil(length($list-map) / 2));
    @each $item in $list-map {
      $item-value: map-get-z(nth($item, 2), $keys...);
      $seed-value: map-get-z(nth($seed, 2), $keys...);
      @if $list-map-sort-dir == 'asc' {
        @if $item-value == $seed-value { $equal: append($equal, $item, 'comma'); }
        @else if $item-value < $seed-value { $less: append($less, $item, 'comma'); }
        @else { $greater: append($greater, $item, 'comma'); }
      }
      @else {
        @if $item-value == $seed-value { $equal: append($equal, $item, 'comma'); }
        @else if $item-value > $seed-value { $less: append($less, $item, 'comma'); }
        @else { $greater: append($greater, $item, 'comma'); }
      }
    }
    @return join(join(map-sort($less, $keys...), $equal), map-sort($greater, $keys...));
  }

  @return $list-map;
}

/**
 * TBA.
 * 
 * @todo Complete documentation
 *
 * @param {ArgList} $list
 *
 * @requires {function} list-map-check
 * @requires {function} map-keys
 *
 * @return {String}
 */
@function map-json($list...) {
  @if length($list) == 1 { $list: list-map-check($list...); }
  @else { $list: list-map-check($list); }
  $output: '{ '; $i: 1;
  @each $tuple in $list {
    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}'; }
    @else {
      $key: nth($tuple, 1);
      $value: nth($tuple, 2);
      @if type-of($value) == 'list' { $output: $output + '"#{$key}": #{map-json($value)}'; }
      @else if type-of($value) == 'number' {
        $value: if(unitless($value), $value, '"#{$value}"');
        $output: $output + '"#{$key}": #{$value}'; }
      @else {
        $value: if(type-of($value) == 'bool', $value, '"#{$value}"');
        $output: $output + '"#{$key}": #{$value}'; }
    }
    @if $i < length(map-keys($list)) { $output: $output + ', '; }
    $i: $i + 1;
  }
  @return $output + ' }';
}
